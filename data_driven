import torchvision.transforms as transforms
import numpy as np
from torch.utils.data import Dataset
from PIL import Image,ImageOps,ImageFilter
import cv2
def rotate(image, s):
    if s == 0:
        image = image
    if s == 1:
        HF = transforms.RandomHorizontalFlip(p=1)
        image = HF(image)
    if s == 2:
        VF = transforms.RandomVerticalFlip(p=1)
        image = VF(image)
    return image

class GetDataset(Dataset):
    def __init__(self, imageFolderDataset, transform=None):
        self.imageFolderDataset = imageFolderDataset
        self.transform = transform
    def __getitem__(self, index):
        img = self.imageFolderDataset[index]
        img = Image.open(img).resize((820,600)).convert('L')
        img = ImageOps.equalize(img)#equalize
        #
        # img_eq_np = np.array(img_eq)#to np for cv
        # img_med = cv2.medianBlur(img_eq_np, 5)#med
        # img = Image.fromarray(img_med.astype('uint8'))#to pil
        # ------------------data enhancement--------------------------#
        j = np.random.randint(0, 3, size=1)  # 随机0-3之间的整数
        img = rotate(img, j)
        # ------------------To tensor------------------#
        if self.transform is not None:
            img = self.transform(img)
            return img
    def __len__(self):
        return len(self.imageFolderDataset)

